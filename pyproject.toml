[tool.poetry]
name = "poetry-dotenv"
version = "0.3.0"
description = "poetry-dotenv - is the plugin that automatically loads environment variables from a dotenv file into the environment before poetry commands are run."
license = "MIT"
authors = ["Volodymyr Pivoshenko <volodymyr.pivoshenko@gmail.com>"]
maintainers = ["Volodymyr Pivoshenko <volodymyr.pivoshenko@gmail.com>"]
keywords = [
    "python",
    "pypi",
    "poetry",
    "plugin",
    "plugins",
    "poetry-plugin",
    "poetry-plugins",
    "env",
    "dotenv",
    "cross-platform",
    "hacktoberfest",
]
homepage = "https://github.com/volopivoshenko/poetry-dotenv"
documentation = "https://github.com/volopivoshenko/poetry-dotenv"
repository = "https://github.com/volopivoshenko/poetry-dotenv"
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Environment :: Other Environment",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering",
    "Natural Language :: English",
]
packages = [{ include = "poetry_dotenv", from = "src" }]

[tool.poetry.urls]
"Issues" = "https://github.com/volopivoshenko/poetry-dotenv/issues"
"Releases" = "https://github.com/volopivoshenko/poetry-dotenv/releases"
"Say Thanks!" = "https://www.buymeacoffee.com/volopivoshenko"

[tool.poetry.dependencies]
python = ">=3.8,<4.0"
poetry = "^1.3.2"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.0.1"
poethepoet = "^0.18.1"
ipython = "^8.9.0"
ipdb = "^0.13.11"
nitpick = "^0.32.0"

[tool.poetry.group.formatters.dependencies]
isort = "^5.12.0"
black = "^22.12.0"
pyupgrade = "^3.3.1"
yesqa = "^1.4.0"

[tool.poetry.group.linters.dependencies]
mypy = "^0.991"
wemake-python-styleguide = "^0.17.0"
pyproject-flake8 = "^3.9.2"
flake8-pytest-style = "^1.6.0"
deptry = "^0.8.0"
codespell = "^2.2.2"

[tool.poetry.group.tests.dependencies]
pytest = "^7.2.1"
xdoctest = "^1.1.0"
pytest-lazy-fixture = "^0.6.3"
pytest-mock = "^3.10.0"
pytest-cov = "^4.0.0"
pytest-sugar = "^0.9.6"
coverage = { version = "^7.1.0", extras = ["toml"] }
sh = "^1.14.3"

[tool.poetry.group.ci.dependencies]
python-semantic-release = "^7.33.0"

[tool.poetry.plugins."poetry.application.plugin"]
poetry-dotenv = "poetry_dotenv.plugin:DotenvPlugin"

[tool.semantic_release]
branch = "main"
changelog_file = "CHANGELOG.md"
build_command = "poetry build"
dist_path = "dist"
upload_to_repository = false
upload_to_release = true
remove_dist = false
version_toml = "pyproject.toml:tool.poetry.version"
version_variable = ["src/poetry_dotenv/__init__.py:__version__"]

[tool.isort]
profile = "black"
line_length = 100
lines_after_imports = 2
lines_between_types = 1
atomic = false
color_output = true
force_single_line = true
length_sort_straight = true
force_alphabetical_sort_within_sections = true

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'

[tool.mypy]
python_version = "3.11"
warn_unused_configs = true
ignore_missing_imports = true
show_error_codes = true
namespace_packages = false
explicit_package_bases = false
files = ["src", "tests"]

[tool.flake8]
max-line-length = 100
max-cognitive-score = 15
max-imports = 15
max-module-members = 15
max-local-variables = 10
max-annotation-complexity = 5
inline-quotes = '"'
docstring_style = "numpy"
exclude = ["__init__.py"]
allowed-domain-names = ["info", "variable", "value", "values", "key", "result"]
per-file-ignores = [
    "tests/*.py: S101, WPS118, WPS204, WPS221, WPS226, WPS342, WPS430, WPS440, WPS442",
]
# S101 - asserts are necessary for the tests
# WPS118 - long names for the tests contain description of the tests
# WPS226 - overuse of the literals is a common thing in the tests
# WPS342 - raw strings are necessary for the parsers' tests
# WPS430 - nested functions are necessary for the parameterized pytest fixtures
# WPS204, WPS440 - overuse of the expression is a common thing in the tests
# WPS442 - pytest fixtures don't violate "variables from outer scopes"
extend-ignore = [
    "NIP",
    "D202",
    "DAR",
    "WPS305",
    "WPS306",
    "WPS472",
]
# NIP - no need to use nitpick plugin
# D202 - code is hard to read without a blank line after a docstring
# DAR - there is no sense to put all sections in docstring
# WPS305 - f-strings are more readable than .format()
# WPS306 - no need to inherit from object
# WPS472 - unpacking for the single variable is more readable than indexing

[tool.codespell]
skip = "tests,.git,.mypy_cache,.pytest_cache,.idea,.vscode"

[tool.deptry]
ignore_transitive = ["cleo", "poetry_dotenv"]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["src", "tests"]
addopts = [
    "-l",
    "-vv",
    "-rx",
    "--xdoc",
    "--color=yes",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--basetemp=tests/fixtures",
]

[tool.coverage.run]
omit = ["*/__init__.py"]

[tool.poe]
poetry_command = ""

[tool.poe.tasks.format]
help = "Run formatters"
sequence = [
    { shell = "find . -type f -name '*.py' | xargs pyupgrade --py311-plus", help = "Run annotations formatter" },
    { shell = "isort .", help = "Run imports formatter" },
    { shell = "black .", help = "Run code formatter" },
    { shell = "yesqa", help = "Run flake8 formatter" },
]

[tool.poe.tasks.lint]
help = "Run linters"
sequence = [
    { shell = "deptry .", help = "Run dependencies linter" },
    { shell = "mypy .", help = "Run types linter" },
    { shell = "pflake8 .", help = "Run code linter" },
    { shell = "codespell .", help = "Run spell linter" },
]

[tool.poe.tasks.tests]
help = "Run tests"
shell = "pytest"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
