[tool.poetry]
name = "poetry-plugin-dotenv"
version = "0.6.14"
description = "poetry-plugin-dotenv - is the plugin that automatically loads environment variables from a dotenv file into the environment before poetry commands are run."
license = "MIT"
authors = ["Volodymyr Pivoshenko <volodymyr.pivoshenko@gmail.com>"]
maintainers = ["Volodymyr Pivoshenko <volodymyr.pivoshenko@gmail.com>"]
keywords = [
  "python",
  "pypi",
  "poetry",
  "plugin",
  "plugins",
  "poetry-plugin",
  "poetry-plugins",
  "env",
  "dotenv",
  "cross-platform",
  "hacktoberfest",
]
homepage = "https://github.com/volopivoshenko/poetry-plugin-dotenv"
documentation = "https://github.com/volopivoshenko/poetry-plugin-dotenv"
repository = "https://github.com/volopivoshenko/poetry-plugin-dotenv"
readme = "README.md"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Environment :: Other Environment",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Topic :: Software Development",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Scientific/Engineering",
  "Natural Language :: English",
]
packages = [{ include = "poetry_plugin_dotenv", from = "src" }]

[tool.poetry.urls]
"Issues" = "https://github.com/volopivoshenko/poetry-plugin-dotenv/issues"
"Releases" = "https://github.com/volopivoshenko/poetry-plugin-dotenv/releases"
"Say Thanks!" = "https://www.buymeacoffee.com/volopivoshenko"

[tool.poetry.dependencies]
python = ">=3.8.1,<4.0"
poetry = "^1.5.1"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.5.0"
poethepoet = ">=0.24.2"
ipdb = "^0.13.13"

[tool.poetry.group.formatters.dependencies]
isort = "^5.13.2"
black = ">=24.1.1"
pyupgrade = "^3.15.0"

[tool.poetry.group.linters.dependencies]
mypy = "^1.8.0"
ruff = ">=0.2.1"
deptry = "^0.12.0"
memestra = "^0.2.1"
codespell = "^2.2.6"

[tool.poetry.group.tests.dependencies]
# https://github.com/pytest-dev/pytest/issues/11890
# https://github.com/TvoroG/pytest-lazy-fixture/issues/65
pytest = "7.4.4"
xdoctest = "^1.1.3"
pytest-lazy-fixture = "^0.6.3"
pytest-codeblocks = "^0.16.1"
pytest-mock = "^3.12.0"
pytest-cov = "^4.1.0"
pytest-sugar = ">=1.0.0"
coverage = { version = "^7.4.1", extras = ["toml"] }
sh = "^2.0.6"

[tool.poetry.group.ci.dependencies]
python-semantic-release = ">=8.7,<10.0"

[tool.poetry.plugins."poetry.application.plugin"]
poetry-plugin-dotenv = "poetry_plugin_dotenv.plugin:DotenvPlugin"

[tool.semantic_release]
branch = "main"
changelog_file = "CHANGELOG.md"
dist_path = "dist"
upload_to_repository = true
upload_to_release = true
remove_dist = false
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = ["src/poetry_plugin_dotenv/__init__.py:__version__"]
commit_author = "github-actions <github-actions@github.com>"
commit_parser = "angular"

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

[tool.semantic_release.commit_parser_options]
major_tags = ["feat"]
minor_tags = ["fix", "perf"]
patch_tags = ["docs"]
allowed_tags = [
  "build",
  "chore",
  "ci",
  "docs",
  "feat",
  "fix",
  "perf",
  "style",
  "refactor",
  "test",
]

[tool.isort]
profile = "black"
line_length = 100
lines_after_imports = 2
lines_between_types = 1
atomic = false
color_output = true
force_single_line = true
length_sort_straight = true
force_alphabetical_sort_within_sections = true

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'

[tool.mypy]
python_version = "3.11"
warn_unused_configs = true
ignore_missing_imports = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = false
files = ["src", "tests"]

[tool.ruff]
target-version = "py311"
line-length = 100
exclude = ["__init__.py"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "ARG002",
  "ANN002",
  "ANN003",
  "ANN101",
  "ANN102",
  "D202",
  "I001",
  "PTH",
  "FBT",
]

[tool.ruff.lint.per-file-ignores]
"tests/*.*" = ["INP001", "S101"]

[tool.ruff.lint.isort]
lines-after-imports = 2
lines-between-types = 1
order-by-type = false
force-single-line = true
force-sort-within-sections = true
required-imports = ["from __future__ import annotations"]

[tool.codespell]
skip = "tests,pyproject.toml,poetry.lock,.git,.ruff_cache,.mypy_cache,.pytest_cache,.idea,.vscode"
ignore-words-list = "redunant"

[tool.deptry]
ignore = ["DEP003"]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["src", "tests"]
addopts = [
  "-l",
  "-vv",
  "-rx",
  "--xdoc",
  "--color=yes",
  "--cov=src",
  "--cov-report=term-missing",
  "--cov-report=xml",
  "--basetemp=tests/fixtures",
]

[tool.coverage.run]
omit = ["*/__init__.py"]

[tool.poe]
poetry_command = ""

[tool.poe.tasks.format]
help = "Run formatters"
sequence = [
  { shell = "find . -type f -name '*.py' | xargs pyupgrade --py311-plus", help = "Run annotations formatter" },
  { shell = "isort .", help = "Run imports formatter" },
  { shell = "ruff format .", help = "Run code formatter" },
  { shell = "black .", help = "Run code formatter" },
]

[tool.poe.tasks.lint]
help = "Run linters"
sequence = [
  { shell = "deptry .", help = "Run dependencies linter" },
  { shell = "mypy .", help = "Run types linter" },
  { shell = "ruff check .", help = "Run code linter" },
  { shell = "codespell .", help = "Run spell linter" },
]

[tool.poe.tasks.tests]
help = "Run tests"
shell = "pytest"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
